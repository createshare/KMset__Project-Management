stages:
  - build
  - test
  - deploy



# 构建 ls2k1000 dist bsp 包用于后续部署 studiopro 板级资源包-开发版
bsp_ls2k1000_dev:
  stage: build
  only:
    - master
    - /^.*develop.*$/
    - merge_requests
    - tags
    - ci_test
    - /^kernel.*$/
    - /^bsp_ls2k1000.*$/
    - /^ide_ls2k1000.*$/
  before_script:
    - uname -a
    - cat /etc/issue
    - apt-get update
    - apt-get install -y -qq lib32ncurses5 lib32z1 > /dev/null
    - apt-get install -y git
    - apt-get install -y scons
    - apt-get install -y python python-pip
    - apt-get install -y zip
    - echo machine git.rt-thread.com login $CI_REGISTRY_USER password $CI_REGISTRY_PASSWORD >> ~/.netrc
    - echo machine github.com login $CI_REGISTRY_USER password $CI_REGISTRY_PASSWORD >> ~/.netrc
    - git config --global http.sslVerify false
    - sync
    - curl -s http://117.143.63.254:9012/www/toolchains/mips-2015.05-19-mips-sde-elf-i686-pc-linux-gnu.tar.bz2 | tar -xjf - -C /opt
    - export RTT_EXEC_PATH=/opt/mips-2015.05/bin
    - $RTT_EXEC_PATH/mips-sde-elf-gcc --version
    - export CPUS=$(cat /proc/cpuinfo | grep "processor" | sort | uniq | wc -l)

  script:
    - echo "build...."
    - prjpath='/projects/ls2k1000/template'
    # remove useless components
    - echo "remove usless components..."

    # prepare to save ci and bsp version info
    - echo "prepare to save ci and bsp version info..."

    - pushd platforms/ls2k1000/drivers
    - bsp_major=$(grep "#define BSP_VERSION_MAJOR" board.h | sed -E 's/^[^0-9]*([0-9]+)[^0-9]*$/\1/g')
    - bsp_minor=$(grep "#define BSP_VERSION_MINOR" board.h | sed -E 's/^[^0-9]*([0-9]+)[^0-9]*$/\1/g')
    - bsp_revision=$(grep "#define BSP_VERSION_REVISION" board.h | sed -E 's/^[^0-9]*([0-9]+)[^0-9]*$/\1/g')
    - echo $bsp_major
    - echo $bsp_minor
    - echo $bsp_revision
    - cd ..
    - touch .version
    - echo "v$bsp_major.$bsp_minor.$bsp_revision-${CI_COMMIT_SHA}-${CI_JOB_ID}" > .version
    - popd

    # prepare to kernel version info
    - echo "prepare to kernel version info..."

    - pushd rt-thread/include
    - rt_version=$(grep "#define RT_VERSION" rtdef.h | sed -E 's/^[^0-9]*([0-9]+)[^0-9]*$/\1/g')
    - rt_subversion=$(grep "#define RT_SUBVERSION" rtdef.h | sed -E 's/^[^0-9]*([0-9]+)[^0-9]*$/\1/g')
    - rt_revision=$(grep "#define RT_REVISION" rtdef.h | sed -E 's/^[^0-9]*([0-9]+)[^0-9]*$/\1/g')
    - echo $rt_version
    - echo $rt_subversion
    - echo $rt_revision
    - cd ..
    - touch .version
    - echo "v$rt_version.$rt_subversion.$rt_revision-${CI_COMMIT_SHA}-${CI_JOB_ID}" > .version
    - popd

    # build libs for development
    # - echo "build libs..."

    # build bsp for development
    - echo "build bsp..."
    - pushd projects/ls2k1000/template
    - scons -j$CPUS
    - rm -rf build/
    - scons --dist-ide --project-path=project_0_dev --project-name=project_0
    - popd

    # build .yaml
    - pushd projects/ls2k1000/template
    - verson_file="board.yaml"

    - pkg_version_latest="$bsp_major.$bsp_minor.$bsp_revision"
    - pkg_version_prev=$(grep "pkg_version:" $verson_file | sed -e's/^.*pkg_version:\ //g')
    - pkg_version_line=$(sed -n '/pkg_version/=' $verson_file)
    - sed -i "$pkg_version_line s/$pkg_version_prev/$pkg_version_latest/" $verson_file

    - kernel_version_latest="$rt_version.$rt_subversion.$rt_revision"
    - kernel_version_prev=$(grep "project_type:" $verson_file | sed -e's/^.*rt-thread-secure|@full|@//g')
    - kernel_version_line=$(sed -n '/project_type/=' $verson_file)
    - sed -i "$kernel_version_line s/$kernel_version_prev/$kernel_version_latest/" $verson_file 
    - popd

    - mkdir bsp_ls2k1000_dev
    - mkdir bsp_ls2k1000_dev/$pkg_version_latest
    - rm -f projects/ls2k1000/template/project_0_dev/board.yaml
    - cp projects/ls2k1000/template/project_0_dev bsp_ls2k1000_dev/$pkg_version_latest -r
    - mv bsp_ls2k1000_dev/$pkg_version_latest/project_0_dev bsp_ls2k1000_dev/$pkg_version_latest/project_0
    - cp projects/ls2k1000/template/board.yaml bsp_ls2k1000_dev/$pkg_version_latest -r

  artifacts:
    paths:
    - bsp_ls2k1000_dev/



# 构建 龙芯2k 文档
doc_ls2k1000:
  stage: build
  image: ubuntu_ci_document_build
  tags:
    - document_deploy
  only:
    - master
    - /^.*develop.*$/
    - merge_requests
    - tags
    - ci_test
    - /^docs.*$/ 
    - /^ls2k1000.*$/
    - /^ide_ls2k1000.*$/
  script:
    # environment.
    - echo machine git.rt-thread.com login $CI_REGISTRY_USER password $CI_REGISTRY_PASSWORD >> ~/.netrc
    # install.
    - git clone -q https://git.rt-thread.com/document/mkdocs-pandoc.git ./mkdocs-pandoc
    - cd ./mkdocs-pandoc && python setup.py install && sudo dpkg -i pandoc-2.3-1-amd64.deb
    - sudo mkdir -pv /usr/share/fonts/truetype/windows-font
    - sudo cp -r ./fonts/* /usr/share/fonts/truetype/windows-font
    - sudo chmod -R 777 /usr/share/fonts/truetype/windows-font
    - cd /usr/share/fonts/truetype/windows-font
    - sudo apt-get install fontconfig
    - sudo fc-cache

    # build RT-Thread_Secure_for_LS2K1000_User_Manual.pdf
    - echo "build pdf"
    - cd $CI_PROJECT_DIR/documents/secure_bsp/ls2k1000/ls2k1000
    - make clean && make

    - mkdir -p $CI_PROJECT_DIR/documents_build/secure_bsp/ls2k1000/ls2k1000
    - cp $CI_PROJECT_DIR/documents/secure_bsp/ls2k1000/ls2k1000/build/RT-Thread_Secure_for_LS2K1000_User_Manual.pdf $CI_PROJECT_DIR/documents_build/secure_bsp/ls2k1000/ls2k1000/'RT-Thread Secure for 龙芯派 2K1000 用户手册'.pdf

  artifacts:
    paths:
    - documents_build/



# 部署 ls2k1000 studiopro 板级资源包
ide_ls2k1000:
  stage: deploy
  only:
    - master
    - /^.*develop.*$/
    - merge_requests
    - tags
    - ci_test
    - /^ide_ls2k1000.*$/
  needs:
    - doc_ls2k1000
    - bsp_ls2k1000_dev
  script:
    - echo "Merge artifacts"
    - echo "Create directories..."
    - mkdir -p ide_ls2k1000
    - mkdir -p ide_ls2k1000/ide_ls2k1000_dev/ide_ls2k1000
    
    # package ls2k1000 sdk for development
    - cp -r $CI_PROJECT_DIR/bsp_ls2k1000_dev/* $CI_PROJECT_DIR/ide_ls2k1000/ide_ls2k1000_dev/ide_ls2k1000/
    - verdir=$(ls $CI_PROJECT_DIR/ide_ls2k1000/ide_ls2k1000_dev/ide_ls2k1000/)
    - mkdir $CI_PROJECT_DIR/ide_ls2k1000/ide_ls2k1000_dev/ide_ls2k1000/$verdir/documents
    - cp -r $CI_PROJECT_DIR/documents_build/secure_bsp/ls2k1000/ls2k1000/* $CI_PROJECT_DIR/ide_ls2k1000/ide_ls2k1000_dev/ide_ls2k1000/$verdir/documents/ 
    - cp -r documents/secure_bsp/ls2k1000/common_docs/* $CI_PROJECT_DIR/ide_ls2k1000/ide_ls2k1000_dev/ide_ls2k1000/$verdir/documents/

  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_SHORT_SHA}_${CI_JOB_ID}"
    paths:
    - ide_ls2k1000





